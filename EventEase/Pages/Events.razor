// Events.razor (in the Pages folder)
@page "/events"
@inject IJSRuntime JSRuntime //for the alerts
@using EventPlanner.Models // Ensure you have this using statement
@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Events</h1>
    <button class="btn btn-primary" @onclick="NavigateToAddEvent">Add Event</button>
    <div class="event-grid">
        @foreach (var eventItem in events)
        {
            <div class="event-card">
                <h3>@eventItem.Name</h3>
                <p><b>Date:</b> @eventItem.Date?.ToString("MM/dd/yyyy")</p>
                <p><b>Time:</b> @eventItem.Time?.ToString(@"hh\:mm tt")</p>
                <p>@eventItem.Description</p>
            </div>
        }
    </div>
}

@code {
    private List<Event>? events;

    [CascadingParameter]
    public EventListEvents? EventListEvents { get; set; }

    @inject NavigationManager NavigationManager

    protected override async Task OnInitializedAsync()
    {
        // In a real application, load events from a database or API.
        // For this example, we'll use the cascading value to get the list.
        events = EventListEvents?.GetEvents();
    }

    private void NavigateToAddEvent()
    {
        NavigationManager.NavigateTo("/addevent");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // If the events is not null, then refresh the page
        if (!firstRender && EventListEvents != null)
        {
            events = EventListEvents.GetEvents();
            StateHasChanged();
        }
    }
}